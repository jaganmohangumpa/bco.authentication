package org.openbase.bco.authenticator.lib;

import org.openbase.jul.exception.NotAvailableException;
import org.openbase.jul.exception.RejectedException;
import rst.domotic.authentification.AuthenticatorTicketType;
import rst.domotic.authentification.LoginResponseType;

/**
 *
 * @author Sebastian Fast <sfast@techfak.uni-bielefeld.de>
 */
public interface AuthenticationServerHandler {
    
    /**
     * Handles a Key Distribution Center (KDC) login request
     * Creates a Ticket Granting Server (TGS) session key that is encrypted by the client's password
     * Creates a Ticket Granting Ticket (TGT) that is encrypted by TGS private key
     * @param clientID Identifier of the client - must be present in client database
     * @param clientNetworkAddress Network address of client
     * @param TGSSessionKey TGS session key generated by controller
     * @param TGSPrivateKey TGS private key generated by controller or saved somewhere in the system
     * @return Returns wrapper class containing both the TGT and TGS session key
     * @throws NotAvailableException Throws, if clientID was not found in database
     * @TODO: Exception description
     */
    public LoginResponseType.LoginResponse handleKDCRequest(String clientID, String clientNetworkAddress, byte[] TGSSessionKey, byte[] TGSPrivateKey) throws NotAvailableException, RejectedException;
    
    /**
     * Handles a Ticket Granting Service (TGS) request
     * Creates a Service Server (SS) session key that is encrypted with the TGS session key
     * Creates a Client Server Ticket (CST) that is encrypted by SS private key
     * @param TGSSessionKey TGS session key generated by controller
     * @param TGSPrivateKey TGS private key generated by controller or saved somewhere in the system
     * @param SSSessionKey SS session key generated by the controller
     * @param SSPrivateKey TGS private key generated by controller or saved somewhere in the system
     * @param wrapper AuthenticatorTicketWrapper that contains both encrypted Authenticator and TGT
     * @return Returns a wrapper class containing both the CST and SS session key
     * @throws RejectedException Throws, if timestamp in Authenticator does not fit to time period in TGT
     *                               or, if clientID in Authenticator does not match clientID in TGT
     * @TODO: Exception description
     */
    public LoginResponseType.LoginResponse handleTGSRequest(byte[] TGSSessionKey, byte[] TGSPrivateKey, byte[] SSSessionKey, byte[] SSPrivateKey, AuthenticatorTicketType.AuthenticatorTicket wrapper) throws RejectedException;
    
    /**
     * Handles a service method (Remote) request to Service Server (SS) (Manager)
     * Updates given CST's validity period and encrypt again by SS private key
     * @param SSSessionKey SS session key generated by server
     * @param SSPrivateKey SS private key only known to SS
     * @param wrapper AuthenticatorTicket wrapper that contains both encrypted Authenticator and TGT
     * @return Returns a wrapper class containing both the modified CST and unchanged Authenticator
     * @throws RejectedException Throws, if timestamp in Authenticator does not fit to time period in TGT
     *                               or, if clientID in Authenticator does not match clientID in TGT
     * @TODO: Exception description
     */
    public AuthenticatorTicketType.AuthenticatorTicket handleSSRequest(byte[] SSSessionKey, byte[] SSPrivateKey, AuthenticatorTicketType.AuthenticatorTicket wrapper) throws RejectedException;
    
}
