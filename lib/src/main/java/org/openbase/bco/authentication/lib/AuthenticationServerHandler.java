package org.openbase.bco.authentication.lib;

/*-
 * #%L
 * BCO Authentication Library
 * %%
 * Copyright (C) 2017 openbase.org
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */

import org.openbase.jul.exception.NotAvailableException;
import org.openbase.jul.exception.RejectedException;
import rst.domotic.authentication.TicketAuthenticatorWrapperType;
import rst.domotic.authentication.TicketSessionKeyWrapperType;

/**
 *
 * @author Sebastian Fast <sfast@techfak.uni-bielefeld.de>
 */
public interface AuthenticationServerHandler {
    
    /**
     * Handles a Key Distribution Center (KDC) login request
     * Creates a Ticket Granting Server (TGS) session key that is encrypted by the client's password
     * Creates a Ticket Granting Ticket (TGT) that is encrypted by TGS private key
     * @param clientID Identifier of the client - must be present in client database
     * @param clientNetworkAddress Network address of client
     * @param TGSSessionKey TGS session key generated by controller
     * @param TGSPrivateKey TGS private key generated by controller or saved somewhere in the system
     * @return Returns wrapper class containing both the TGT and TGS session key
     * @throws NotAvailableException Throws, if clientID was not found in database
     * @TODO: Exception description
     */
    public TicketSessionKeyWrapperType.TicketSessionKeyWrapper handleKDCRequest(String clientID, String clientNetworkAddress, byte[] TGSSessionKey, byte[] TGSPrivateKey) throws NotAvailableException, RejectedException;
    
    /**
     * Handles a Ticket Granting Service (TGS) request
     * Creates a Service Server (SS) session key that is encrypted with the TGS session key
     * Creates a Client Server Ticket (CST) that is encrypted by SS private key
     * @param TGSSessionKey TGS session key generated by controller
     * @param TGSPrivateKey TGS private key generated by controller or saved somewhere in the system
     * @param SSSessionKey SS session key generated by the controller
     * @param SSPrivateKey TGS private key generated by controller or saved somewhere in the system
     * @param wrapper TicketAuthenticatorWrapperWrapper that contains both encrypted Authenticator and TGT
     * @return Returns a wrapper class containing both the CST and SS session key
     * @throws RejectedException Throws, if timestamp in Authenticator does not fit to time period in TGT
     *                               or, if clientID in Authenticator does not match clientID in TGT
     * @TODO: Exception description
     */
    public TicketSessionKeyWrapperType.TicketSessionKeyWrapper handleTGSRequest(byte[] TGSSessionKey, byte[] TGSPrivateKey, byte[] SSSessionKey, byte[] SSPrivateKey, TicketAuthenticatorWrapperType.TicketAuthenticatorWrapper wrapper) throws RejectedException;
    
    /**
     * Handles a service method (Remote) request to Service Server (SS) (Manager)
     * Updates given CST's validity period and encrypt again by SS private key
     * @param SSSessionKey SS session key generated by server
     * @param SSPrivateKey SS private key only known to SS
     * @param wrapper TicketAuthenticatorWrapper wrapper that contains both encrypted Authenticator and TGT
     * @return Returns a wrapper class containing both the modified CST and unchanged Authenticator
     * @throws RejectedException Throws, if timestamp in Authenticator does not fit to time period in TGT
     *                               or, if clientID in Authenticator does not match clientID in TGT
     * @TODO: Exception description
     */
    public TicketAuthenticatorWrapperType.TicketAuthenticatorWrapper handleSSRequest(byte[] SSSessionKey, byte[] SSPrivateKey, TicketAuthenticatorWrapperType.TicketAuthenticatorWrapper wrapper) throws RejectedException;
    
}
